{
	"info": {
		"_postman_id": "b7c7adbb-e875-4370-873c-46c09e209776",
		"name": "OpenChargeMapAPI",
		"description": "This collection is to create API tests for Open Charge Map API; covering two primary endpoints: Get POIs and Get Reference Data. The test's covering response time, status code, response schema and specific business logics.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "31619727"
	},
	"item": [
		{
			"name": "Get POIs",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test to verify status code.\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// Test to verify the response data is in JSON format.\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"// Test to verify the response time.\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"/*Test to verify that response body is array of POI objects.*/\r",
							"pm.test(\"Response data contains an array of POI objects\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"// Test to verify that each POI contains mandatory fields ID, AddressInfo, NumberOfPoint.\r",
							"pm.test(\"Each POI contains mandatory fields ID, AddressInfo, NumberOfPoints\",function(){\r",
							"    pm.response.json().forEach(function(poi) {\r",
							"        pm.expect(poi).to.have.property('ID');\r",
							"        pm.expect(poi).to.have.property('AddressInfo');\r",
							"        pm.expect(poi).to.have.property('NumberOfPoints');\r",
							"        //AddressInfo contains Lattitude and longitude and are of Number data type.\r",
							"        pm.expect(poi.AddressInfo).to.have.property('Latitude');\r",
							"        pm.expect(poi.AddressInfo).to.have.property('Longitude');\r",
							"        pm.expect(poi.AddressInfo.Latitude).to.be.a('number');\r",
							"        pm.expect(poi.AddressInfo.Longitude).to.be.a('number');\r",
							"    });\r",
							"});\r",
							"// Test to verify response contain an array of 5 PPOI objects.\r",
							"pm.test(\"Response contains an array of 5 POI objects\", function () {\r",
							"    pm.expect(pm.response.json()).to.be.an('array').and.to.have.lengthOf(5);\r",
							"}); \r",
							"// Test to verify that the returned POIs are within 10km of specific coordinates\r",
							"pm.test(\"POIs are within 10km of specific coordinates\", function () {\r",
							"    pm.response.json().forEach((poi) => {\r",
							"        var distance = poi.AddressInfo.Distance;\r",
							"        pm.expect(distance).to.be.below(10);\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"baseURL\");\r",
							"pm.environment.get(\"variable_key\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"followOriginalHttpMethod": true,
				"followRedirects": false
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}poi/?latitude={{x}}&longitude={{y}}&distance={{}d}&maxresults={{n}}&key={{variable_key}}",
					"host": [
						"{{baseURL}}poi"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "latitude",
							"value": "{{x}}"
						},
						{
							"key": "longitude",
							"value": "{{y}}"
						},
						{
							"key": "distance",
							"value": "{{}d}"
						},
						{
							"key": "maxresults",
							"value": "{{n}}"
						},
						{
							"key": "key",
							"value": "{{variable_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Reference data",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.environment.get(\"baseURL\");\r",
							"pm.environment.get(\"variable_key\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Test to verify status code.\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Test to verify the response data is in JSON format\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"// Test to verify the response time\r",
							"pm.test(\"Response time is less than 1000ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"// Schema validation\r",
							"pm.test(\"Response contains array of ChargerTypes with ID and Title fields\", function () {\r",
							"    const chargerTypes = pm.response.json().ChargerTypes;\r",
							"    chargerTypes.forEach((charger) => {\r",
							"        pm.expect(charger).to.have.property('ID').that.is.a('number');\r",
							"        pm.expect(charger).to.have.property('Title').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains array of StatusTypes with ID and Title fields\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const statusTypes = jsonData.StatusTypes;\r",
							"    if (statusTypes) {\r",
							"        statusTypes.forEach((status) => {\r",
							"            pm.expect(status).to.have.property('ID').that.is.a('number');\r",
							"            pm.expect(status).to.have.property('Title').that.is.a('string');\r",
							"        });\r",
							"        const ids = statusTypes.map(status => status.ID);\r",
							"        pm.expect([...new Set(ids)].length).to.equal(ids.length);\r",
							"    } else {\r",
							"        pm.expect(statusTypes).to.not.be.undefined;\r",
							"    }\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains array of CheckinStatusTypes with ID and Title fields\", function () {\r",
							"    const checkinStatusTypes = pm.response.json().CheckinStatusTypes;\r",
							"    checkinStatusTypes.forEach((checkinStatus) => {\r",
							"        pm.expect(checkinStatus).to.have.property('ID').that.is.a('number');\r",
							"        pm.expect(checkinStatus).to.have.property('Title').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains array of ConnectionTypes with ID and Title fields\", function () {\r",
							"    const connectionTypes = pm.response.json().ConnectionTypes;\r",
							"    connectionTypes.forEach((connection) => {\r",
							"        pm.expect(connection).to.have.property('ID').that.is.a('number');\r",
							"        pm.expect(connection).to.have.property('Title').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains array of CurrentTypes with ID and Title fields\", function () {\r",
							"    const currentTypes = pm.response.json().CurrentTypes;\r",
							"    currentTypes.forEach((current) => {\r",
							"        pm.expect(current).to.have.property('ID').that.is.a('number');\r",
							"        pm.expect(current).to.have.property('Title').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains array of DataProviders with ID and Title fields\", function () {\r",
							"    const dataProviders = pm.response.json().DataProviders;\r",
							"    dataProviders.forEach((dataProvider) => {\r",
							"        pm.expect(dataProvider).to.have.property('ID').that.is.a('number');\r",
							"        pm.expect(dataProvider).to.have.property('Title').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"pm.test(\"Response contains array of Operators with ID and Title fields\", function () {\r",
							"    const operators = pm.response.json().Operators;\r",
							"    operators.forEach((operator) => {\r",
							"        pm.expect(operator).to.have.property('ID').that.is.a('number');\r",
							"        pm.expect(operator).to.have.property('Title').that.is.a('string');\r",
							"    });\r",
							"});\r",
							"\r",
							"//business logic(fast and slow)\r",
							"pm.test(\"ChargerTypes contains objects with IsFastChargeCapable true and false\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const chargerTypes = jsonData.ChargerTypes;\r",
							"\r",
							"    // Check for at least one object with IsFastChargeCapable: true\r",
							"    const hasFastCharge = chargerTypes.some(charger => charger.IsFastChargeCapable === true);\r",
							"    pm.expect(hasFastCharge).to.be.true;\r",
							"\r",
							"    // Check for at least one object with IsFastChargeCapable: false\r",
							"    const hasSlowCharge = chargerTypes.some(charger => charger.IsFastChargeCapable === false);\r",
							"    pm.expect(hasSlowCharge).to.be.true;\r",
							"});\r",
							"\r",
							"//business logic(unique ID)\r",
							"function isADuplicate(id) {\r",
							"    return id.length !== (new Set(id)).size;\r",
							"}\r",
							"\r",
							"pm.test(\"StatusTypes have unique IDs\", function () {\r",
							"    const jsonData = pm.response.json();\r",
							"    const statusTypes = jsonData.StatusTypes;\r",
							"    if (statusTypes) {\r",
							"        const ids = statusTypes.map(status => status.ID);\r",
							"         console.log(ids)\r",
							"        pm.expect(isADuplicate(ids)).to.equal(false);\r",
							"    } else {\r",
							"        pm.expect(statusTypes).to.not.be.undefined;\r",
							"    }\r",
							"   \r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}referencedata/?key={{variable_key}}",
					"host": [
						"{{baseURL}}referencedata"
					],
					"path": [
						""
					],
					"query": [
						{
							"key": "key",
							"value": "{{variable_key}}"
						}
					]
				}
			},
			"response": []
		}
	]
}